{"version":3,"sources":["actions/index.js","constants.js","reducers/player.js","utils/trig.js","models/point.js","utils/random.js","reducers/level.js","reducers/index.js","components/index.js","components/Player.js","components/Map.js","index.js"],"names":["touches","windowWidth","windowHeight","type","constants","ACCELERATION","JUMP_ACCELERATION","RUN_ACCELERATION","VELOCITY_LOSS","PLANET_MASS","PLAYER_WIDTH","PLAYER_HEIGHT","PLATFORM_SIDE","SPEED_LIMIT","DOWN_CONSTANT","POINTS","BACKGROUND_RADIUS","LEVEL_RADIUS","PLANET_RADIUS","PLATFORMS","CAMERA_INERTIA","TOUCH_DEBOUNCE_LIMIT","FLY_ACCELERATION","GROUND_FRICTION","AIR_FRICTION","keyToDirection","calculateAcceleration","keys","posR","colliding","accAngle","accR","verticalAcc","horizontalAcc","Math","atan","r","pow","angle","checkCollisions","posAngle","platforms","sides","up","left","down","right","almost","playerWidthPlatform","playerAnglePlatform","playerHeightPlatform","platform","radiusDiff","getRadius","angleDiff","getAngle","PI","abs","tan","player","newKeys","state","Set","velR","velAngle","cameraR","cameraAngle","debounce","action","levelState","add","key","Object","assign","delete","length","has","clientX","collisions","level","collidingIsh","planetRadius","newAcc","newVelR","min","newPosR","friction","newVelAngle","frictionAcc","sign","newPosAngle","newCameraR","newCameraAngle","newDebounce","size","Point","radius","this","undefined","posX","round","cos","posY","sin","generateReachablePoint","sourcePoint","gravity","velY","deltaPosX","getTimeOfFlight","deltaAngle","randXFraction","random","randYFraction","getMaxHeightForDeltaXFraction","deltaXFraction","maxHeight","getMaxHeight","getPlanetRadius","wins","getGoalRadius","generateLevel","goalRadius","i","pointClearsLevel","push","generatePath","path","lastPoint","nextPoint","point","getX","getY","defaultState","newWins","rootReducer","Component","getState","context","document","createElement","getContext","currentValue","updateCanvas","updatePosition","previousValue","shouldCanvasUpdate","shouldPositionUpdate","Error","Player","fillStyle","canvas","clearRect","width","height","save","translate","rotate","fillRect","restore","offsetX","offsetY","scale","y","floor","x","Map","store","components","center","points","numPoints","maxRadius","minRadius","minDistance","u","newPoint","clear","pointsInCircle","randoms","renderPlatforms","beginPath","arc","fill","strokeStyle","lineWidth","stroke","root","getElementById","window","innerWidth","innerHeight","onresize","event","appendChild","init","createLogger","predicate","createStore","componentInstances","map","component","render","reduce","shouldUpdate","componentInstance","shouldComponentUpdate","rotation","renderToContext","requestAnimationFrame","animationTicker","timestamp","setInterval","dispatch","onkeydown","onkeyup","body","addEventListener","preventDefault","passive"],"mappings":"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","file":"static/js/main.a021fc67.chunk.js","sourcesContent":["export const RENDER_TICK = 'RENDER_TICK'\nexport const renderTick = () => ({\n    type: RENDER_TICK\n})\n\nexport const GAME_TICK = 'GAME_TICK'\nexport const gameTick = (scale) => ({\n    type: GAME_TICK,\n    scale\n})\n\nexport const KEY_DOWN = 'KEY_DOWN'\nexport const keyDown = (key) => ({\n    type: KEY_DOWN,\n    key\n})\n\nexport const KEY_UP = 'KEY_UP'\nexport const keyUp = (key) => ({\n    type: KEY_UP,\n    key\n})\n\nexport const TOUCHES = 'TOUCHES'\nexport const touches = (touches, windowWidth, windowHeight) => ({\n    type: TOUCHES,\n    touches,\n    windowWidth,\n    windowHeight\n})\n\nexport const LEVEL_WIN = 'LEVEL_WIN'\nexport const levelWin = () => ({\n    type: LEVEL_WIN\n})\n\nexport const RESET_LEVEL = 'RESET_LEVEL'\nexport const resetLevel = () => ({\n    type: RESET_LEVEL\n})\n","const constants = {\n    ACCELERATION: 0.3,\n    JUMP_ACCELERATION: 3,\n    RUN_ACCELERATION: 0.1,\n    VELOCITY_LOSS: 10,\n    PLANET_MASS: 400000,\n    PLAYER_WIDTH: 20,\n    PLAYER_HEIGHT: 30,\n    PLATFORM_SIDE: 40,\n    SPEED_LIMIT: 10,\n    DOWN_CONSTANT: 0.1,\n\n    POINTS: 20000,\n    BACKGROUND_RADIUS: 4000,\n    LEVEL_RADIUS: 4000,\n    PLANET_RADIUS: 3000,\n    PLATFORMS: 1000,\n    CAMERA_INERTIA: 20,\n\n    TOUCH_DEBOUNCE_LIMIT: 10,\n}\n\nconstants.FLY_ACCELERATION = constants.RUN_ACCELERATION / 2\nconstants.GROUND_FRICTION = constants.RUN_ACCELERATION / 2\nconstants.AIR_FRICTION = constants.GROUND_FRICTION / 2\n\nexport default constants\n","import {\n    GAME_TICK,\n    KEY_DOWN,\n    KEY_UP,\n    TOUCHES,\n    LEVEL_WIN,\n} from '../actions/index'\nimport constants from '../constants.js'\nimport { normalize } from '../utils/trig'\n\nconst keyToDirection = {\n    \"w\": \"up\",\n    \"ArrowUp\": \"up\",\n    \"a\": \"left\",\n    \"ArrowLeft\": \"left\",\n    \"s\": \"down\",\n    \"ArrowDown\": \"down\",\n    \"d\": \"right\",\n    \"ArrowRight\": \"right\",\n    \" \": \"up\",\n}\n\nconst calculateAcceleration = (keys, posR, colliding) => {\n    var accAngle = 0, accR = 0\n    var verticalAcc = 0\n    var horizontalAcc = constants.FLY_ACCELERATION\n    if(colliding) {\n        verticalAcc = constants.JUMP_ACCELERATION\n        horizontalAcc = constants.RUN_ACCELERATION\n    }\n    for(const key of keys){\n        switch(key) {\n        case \"up\":\n            accR += verticalAcc\n            break\n\n        case \"left\":\n            accAngle += Math.atan(horizontalAcc / posR)\n            break\n\n        case \"down\":\n            accR -= constants.DOWN_CONSTANT\n            break\n\n        case \"right\":\n            accAngle -= Math.atan(horizontalAcc / posR)\n            break\n\n        default:\n            break\n        }\n    }\n\n    accR -= constants.PLANET_MASS / Math.pow(posR, 2)\n\n    return { r: accR, angle: accAngle }\n}\n\nconst checkCollisions = (posR, posAngle, platforms) => {\n    var sides = { up: false, left: false, down: false, right: false, almost: false }\n    const playerWidthPlatform = constants.PLAYER_WIDTH / 2 + constants.PLATFORM_SIDE / 2\n    const playerAnglePlatform = Math.atan(playerWidthPlatform / posR)\n    const playerHeightPlatform = constants.PLAYER_HEIGHT / 2 + constants.PLATFORM_SIDE / 2\n    for(const platform of platforms) {\n        const radiusDiff = platform.getRadius() - posR\n        const angleDiff = normalize(platform.getAngle() - posAngle)\n\n        sides.almost = sides.almost || (\n            Math.abs(radiusDiff) < playerHeightPlatform + 1 &&\n            Math.abs(angleDiff) < Math.atan((playerWidthPlatform - 3) / posR) &&\n            radiusDiff < 0)\n\n        if(Math.abs(radiusDiff) > playerHeightPlatform) {\n            continue\n        }\n        if(Math.abs(angleDiff) > playerAnglePlatform) {\n            continue\n        }\n        if(playerHeightPlatform - Math.abs(radiusDiff) <\n            playerWidthPlatform - Math.abs(posR * Math.tan(angleDiff))\n        ) {\n            if(radiusDiff >= 0)\n                sides.up = sides.up || Math.abs(radiusDiff) - playerHeightPlatform\n            else\n                sides.down = sides.down || playerHeightPlatform - Math.abs(radiusDiff)\n        } else {\n            if(angleDiff >= 0)\n                sides.left = sides.left || Math.abs(angleDiff) - playerAnglePlatform\n            else\n                sides.right = sides.right || playerAnglePlatform - Math.abs(angleDiff)\n        }\n    }\n    return sides\n}\n\nconst player = (\n    state = { keys: new Set(),\n              velR: 0, velAngle: 0,\n              posR: 3100, posAngle: Math.PI/2,\n              cameraR: 3100, cameraAngle: Math.PI/2,\n              debounce: 0\n    }, action, levelState\n) => {\n    var newKeys\n    switch(action.type) {\n    case KEY_DOWN:\n        newKeys = new Set(state.keys)\n        newKeys.add(keyToDirection[action.key])\n        return Object.assign({}, state, { keys: newKeys })\n\n    case KEY_UP:\n        newKeys = new Set(state.keys)\n        newKeys.delete(keyToDirection[action.key])\n        return Object.assign({}, state, { keys: newKeys })\n\n    case TOUCHES:\n        newKeys = new Set()\n        if(action.touches.length === 2) {\n            if(state.debounce === constants.TOUCH_DEBOUNCE_LIMIT) {\n                newKeys = new Set(state.keys)\n            }\n            newKeys.add(\"up\")\n        } else if(action.touches.length > 0) {\n            if(state.keys.has(\"up\")) {\n                newKeys.add(\"up\")\n            }\n\n            if(action.touches[0].clientX > action.windowWidth / 2) {\n                newKeys.add(\"right\")\n            } else {\n                newKeys.add(\"left\")\n            }\n        }\n\n        return Object.assign({}, state, { keys: newKeys })\n\n    case GAME_TICK:\n        const collisions = checkCollisions(state.posR, state.posAngle, levelState.level)\n        const collidingIsh =\n              (state.posR - constants.PLAYER_HEIGHT / 2 - 1 < levelState.planetRadius) || collisions.almost\n        const newAcc = calculateAcceleration(state.keys, state.posR, collidingIsh)\n\n        var newVelR = Math.min(state.velR + newAcc.r, constants.SPEED_LIMIT)\n        if((collisions.up && state.velR > 0) || (collisions.down && state.velR < 0)) {\n            newVelR = 0\n        }\n        var newPosR = state.posR + newVelR +\n            collisions.down + collisions.up\n\n        if(state.posR - constants.PLAYER_HEIGHT / 2 < levelState.planetRadius) {\n            newPosR = levelState.planetRadius + constants.PLAYER_HEIGHT / 2\n            newVelR = (newVelR < -constants.VELOCITY_LOSS) ? -(newVelR+constants.VELOCITY_LOSS) : 0\n            newVelR = 0\n        }\n\n        const friction = collidingIsh ? constants.GROUND_FRICTION : constants.AIR_FRICTION\n\n        var newVelAngle = state.velAngle + newAcc.angle\n\n        const frictionAcc = Math.sign(-state.velAngle) * friction\n        newVelAngle +=  Math.tan(frictionAcc / state.posR)\n\n        if(Math.abs(newVelAngle) < Math.tan(friction / state.posR)) {\n            newVelAngle = 0\n        }\n\n        if((collisions.left && state.velAngle > 0) || (collisions.right && state.velAngle < 0)) {\n            newVelAngle = 0\n        }\n        var newPosAngle = state.posAngle + newVelAngle +\n            collisions.left + collisions.right\n\n        if(newPosAngle > 2 * Math.PI) {\n            newPosAngle -= 2 * Math.PI\n        } else if(newPosAngle < 0) {\n            newPosAngle += 2 * Math.PI\n        }\n\n        const newCameraR = ((state.cameraR * constants.CAMERA_INERTIA + newPosR) /\n                            (constants.CAMERA_INERTIA + 1))\n\n        var angleDiff = newPosAngle - state.cameraAngle\n        if(angleDiff > Math.PI) {\n            angleDiff -= 2 * Math.PI\n        } else if(angleDiff < - Math.PI) {\n            angleDiff += 2 * Math.PI\n        }\n\n        var newCameraAngle = state.cameraAngle + angleDiff / constants.CAMERA_INERTIA\n        if(newCameraAngle > 2 * Math.PI) {\n            newCameraAngle -= 2 * Math.PI\n        } else if(newCameraAngle < 0) {\n            newCameraAngle += 2 * Math.PI\n        }\n\n        let newDebounce = state.debounce\n        if(state.keys.size === 0) {\n            newDebounce = 0\n        } else if(state.debounce < constants.TOUCH_DEBOUNCE_LIMIT) {\n            newDebounce += 1\n        }\n\n        return Object.assign({}, state, {\n            velAngle: newVelAngle, velR: newVelR,\n            posAngle: newPosAngle, posR: newPosR,\n            cameraAngle: newCameraAngle, cameraR: newCameraR,\n            debounce: newDebounce,\n        })\n\n    case LEVEL_WIN:\n        return Object.assign({}, state, {\n            posR: constants.PLANET_RADIUS, cameraR: constants.PLANET_RADIUS })\n\n    default:\n        return state\n    }\n}\n\nexport default player\n","export const normalize = (angle) => {\n    if(angle > Math.PI) {\n        return angle - 2 * Math.PI\n    }\n    if(angle < - Math.PI) {\n        return angle + 2 * Math.PI\n    }\n    return angle\n}\n","class Point {\n    constructor(angle, radius) {\n        this.angle = angle\n        this.radius = radius\n    }\n\n    getAngle() {\n        return this.angle\n    }\n\n    getRadius() {\n        return this.radius\n    }\n\n    getX() {\n        if (this.posX === undefined) {\n            this.posX = Math.round(this.radius * Math.cos(this.angle))\n        }\n        return this.posX\n    }\n\n    getY() {\n        if (this.posY === undefined) {\n            this.posY = Math.round(this.radius * Math.sin(this.angle))\n        }\n        return this.posY\n    }\n}\n\nexport default Point\n","import Point from '../models/point.js'\nimport constants from '../constants.js'\n\nexport const pointsInCircle = (\n    numPoints, maxRadius, minRadius = 0, minDistance = 0) => {\n        var points = []\n        while(points.length < numPoints) {\n            const angle = Math.random()*2*Math.PI\n            const u = Math.random()\n            const r = (u > 1) ? 2 - u : u\n            const radius = r * (maxRadius - minRadius) + minRadius\n            if(radius > minRadius) {\n                const newPoint = new Point(angle, radius)\n                var clear = true\n                if(minDistance > 0) {\n                    for(const point of points) {\n                        if(Math.abs(point.getX() - newPoint.getX()) +\n                           Math.abs(point.getY() - newPoint.getY()) < minDistance) {\n                            clear = false\n                            break\n                        }\n                    }\n                }\n                if(clear) {\n                    points.push(newPoint)\n                }\n            }\n        }\n        return points\n    }\n\nexport const generateReachablePoint = (\n    sourcePoint\n) => {\n    const gravity = constants.PLANET_MASS / Math.pow(sourcePoint.getRadius(), 2)\n    // Assuming a single tick of jump acceleration\n    const velY = constants.JUMP_ACCELERATION\n\n    const accX = constants.FLY_ACCELERATION\n    const deltaPosX = accX * Math.pow(getTimeOfFlight(velY, gravity), 2) / 3\n    const deltaAngle = Math.atan(deltaPosX / sourcePoint.getRadius())\n\n    const randXFraction = Math.pow(Math.random(), 4) * Math.sign(Math.random() - 0.5)\n    const randYFraction = Math.random()\n\n    return new Point(\n        sourcePoint.getAngle() + deltaAngle * randXFraction,\n        sourcePoint.getRadius() +\n            getMaxHeightForDeltaXFraction(velY, gravity, randXFraction) * randYFraction\n    )\n}\n\nconst getTimeOfFlight = (velY, gravity) => {\n    return 2 * velY / gravity\n}\n\nconst getMaxHeight = (velY, gravity) => {\n    return Math.pow(velY, 2) / (2 * gravity)\n}\n\nconst getMaxHeightForDeltaXFraction = (velY, gravity, deltaXFraction) => {\n    const maxHeight = getMaxHeight(velY, gravity)\n    if (Math.abs(deltaXFraction) < 0.5) {\n        return maxHeight\n    }\n    return maxHeight * (1 - (Math.abs(deltaXFraction) - 0.5) * 2)\n}\n","import { generateReachablePoint } from '../utils/random'\nimport constants from '../constants'\nimport { LEVEL_WIN, RESET_LEVEL } from '../actions'\nimport Point from '../models/point.js'\n\nconst getPlanetRadius = (wins) => (\n    constants.PLANET_RADIUS\n)\n\nconst getGoalRadius = (wins) => (\n    constants.LEVEL_RADIUS * 1.5 ** wins\n)\n\nconst generateLevel = (wins) => {\n    const goalRadius = getGoalRadius(wins)\n    var level = []\n    for (var i = 0; i < 42; i++) {\n        const sourcePoint = new Point(\n            Math.random() * Math.PI * 2,\n            constants.PLANET_RADIUS + 20\n        )\n        if (pointClearsLevel(sourcePoint, level)) {\n            level.push(...generatePath(sourcePoint, goalRadius, level))\n        }\n    }\n    return level\n}\n\nconst generatePath = (sourcePoint, goalRadius, level) => {\n    var path = [sourcePoint]\n    var lastPoint = sourcePoint\n    while (true) {\n        var nextPoint = generateReachablePoint(lastPoint)\n        if (nextPoint.getRadius() >= goalRadius) {\n            break\n        }\n        if (pointClearsLevel(nextPoint, path)\n            && pointClearsLevel(nextPoint, level)\n           ) {\n            path.push(nextPoint)\n            lastPoint = nextPoint\n        }\n    }\n    return path\n}\n\nconst pointClearsLevel = (nextPoint, level) => {\n    for (const point of level) {\n        if (Math.abs(point.getX() - nextPoint.getX()) +\n            Math.abs(point.getY() - nextPoint.getY()) < 100) {\n            return false\n        }\n    }\n    return true\n}\n\nconst defaultWins = 0\n\nvar defaultState = { level: generateLevel(defaultWins),\n                     wins: defaultWins,\n                     planetRadius: getPlanetRadius(defaultWins),\n                     goalRadius: getGoalRadius(defaultWins) }\n\nconst level = (state = Object.assign({}, defaultState), action) => {\n    var newWins = state.wins\n    if (action.type === LEVEL_WIN) {\n        newWins += 1\n    }\n    if (action.type === LEVEL_WIN || action.type === RESET_LEVEL) {\n        return Object.assign({}, state, {\n                level: generateLevel(newWins),\n                wins: newWins,\n                planetRadius: getPlanetRadius(newWins),\n            goalRadius: getGoalRadius(newWins)})\n    }\n\n    return state\n}\n\nexport default level\n","import { GAME_TICK } from '../actions'\nimport player from './player'\nimport level from './level'\n\nconst rootReducer = (state = {} , action) => {\n    switch(action.type) {\n        case GAME_TICK:\n            return {\n                player: player(state.player, action, state.level),\n                level: level(state.level, action)\n            }\n\n        default:\n            return {\n                player: player(state.player, action),\n                level: level(state.level, action)\n            }\n    }\n}\n\nexport default rootReducer\n","export class Component {\n    constructor(getState) {\n        this.context = document.createElement('canvas').getContext(\"2d\")\n        this.getState = getState\n        this.currentValue = undefined\n        this.updateCanvas = false\n        this.updatePosition = false\n    }\n\n    shouldComponentUpdate() {\n        const previousValue = this.currentValue\n        this.currentValue = this.getState()\n\n        this.updateCanvas = this.shouldCanvasUpdate(\n            previousValue, this.currentValue)\n        this.updatePosition = this.shouldPositionUpdate(\n            previousValue, this.currentValue)\n        return this.updateCanvas || this.updatePosition\n    }\n\n    shouldCanvasUpdate(previousValue, currentValue) {\n        return this.updateCanvas = previousValue !== currentValue\n    }\n\n    shouldPositionUpdate(previousValue, currentValue) {\n        return this.updatePosition = previousValue !== currentValue\n    }\n\n    render() {\n        throw new Error(\"Component class shall not be instantiated directly\")\n    }\n}\n\n","import { Component } from './index'\nimport constants from '../constants'\n\nclass Player extends Component {\n    shouldCanvasUpdate(previousValue, currentValue) {\n        if(previousValue === undefined) {\n            return true\n        }\n\n        return this.updateCanvas = (\n            previousValue.player.posAngle !== currentValue.player.posAngle ||\n            previousValue.player.posR !== currentValue.player.posR\n        )\n    }\n\n    shouldPositionUpdate(previousValue, currentValue) {\n        if(previousValue === undefined) {\n            return true\n        }\n\n        return this.updatePosition = (\n            previousValue.player.posAngle !== currentValue.player.posAngle ||\n            previousValue.player.posR !== currentValue.player.posR ||\n            previousValue.player.cameraAngle !== currentValue.player.cameraAngle ||\n            previousValue.player.cameraR !== currentValue.player.cameraR\n        )\n    }\n\n    render() {\n        const state = this.getState()\n        if(this.updateCanvas) {\n            this.context.fillStyle = \"#007DFF\"\n            const canvas = this.context.canvas\n            this.context.clearRect(0, 0, canvas.width, canvas.height)\n            this.context.save()\n            this.context.translate(\n                constants.PLAYER_WIDTH  * 2,\n                constants.PLAYER_HEIGHT  * 2\n            )\n            this.context.rotate(state.player.posAngle)\n            this.context.fillRect(\n                - constants.PLAYER_HEIGHT / 2,\n                - constants.PLAYER_WIDTH / 2,\n                constants.PLAYER_HEIGHT,\n                constants.PLAYER_WIDTH\n            )\n            this.context.restore()\n        }\n        return {\n            canvas: this.context.canvas,\n            angle: state.player.posAngle,\n            r: state.player.posR,\n            offsetX: constants.PLAYER_WIDTH * 2,\n            offsetY: constants.PLAYER_HEIGHT * 2\n        }\n    }\n\n    renderToContext(context, state, scale) {\n        const wins = state.level.wins\n        context.save()\n        context.fillStyle = \"#007DFF\"\n        context.rotate(state.player.posAngle)\n        context.translate(state.player.posR * scale, 0)\n        context.fillRect(\n            - constants.PLAYER_HEIGHT / 2 * scale,\n            - constants.PLAYER_WIDTH / 2 * scale,\n            constants.PLAYER_HEIGHT * scale,\n            constants.PLAYER_WIDTH * scale\n        )\n        context.fillStyle = \"#FFFFFF\"\n        for(var i = 0; i < wins; i++) {\n            var y = Math.floor(i / 2 + 1)\n            var x = Math.floor(i % 2 + 1)\n            context.fillRect(\n                - (constants.PLAYER_HEIGHT / 2 - constants.PLAYER_HEIGHT / 4 * y + 2) * scale,\n                - (constants.PLAYER_WIDTH / 2 - constants.PLAYER_WIDTH / 3 * x + 2) * scale,\n                4 * scale,\n                4 * scale\n            )\n        }\n        context.restore()\n    }\n}\n\nexport default Player\n","import { Component } from './index'\nimport constants from '../constants'\nimport { pointsInCircle } from '../utils/random'\n\nclass Map extends Component {\n    constructor(getState) {\n        super(getState)\n        this.context.canvas.width = constants.LEVEL_RADIUS * 2 + 100\n        this.context.canvas.height = constants.LEVEL_RADIUS * 2 + 100\n        this.center = constants.LEVEL_RADIUS + 50\n        const numShapes = 1000\n        this.points = pointsInCircle(numShapes, constants.PLANET_RADIUS - 5)\n        this.randoms = []\n        for(var i = 0; i < this.points.length; i++) {\n            this.randoms.push(Math.random())\n        }\n\n        this.context.canvas.width = 100\n        this.context.canvas.height = 100\n        //this.renderToContext(this.context, this.center, getState())\n    }\n\n    shouldCanvasUpdate(previousValue, currentValue) {\n        return this.updateCanvas = false\n    }\n\n    shouldPositionUpdate(previousValue, currentValue) {\n        return this.updatePosition = false\n    }\n\n    render() {\n        return {\n            canvas: this.context.canvas,\n            angle: 0,\n            r: 0,\n            offsetX: this.center,\n            offsetY: this.center,\n        }\n    }\n\n    renderToContext(context, state, scale) {\n        renderPlatforms(context, state.level.level, scale)\n\n        context.fillStyle = \"#666666\"\n        context.beginPath()\n        context.arc(0, 0, state.level.planetRadius * scale, 0, 2 * Math.PI)\n        context.fill()\n\n        context.strokeStyle = \"#00FF00\"\n        context.lineWidth = 10\n        context.beginPath()\n        context.arc(0, 0, state.level.goalRadius * scale, 0, 2 * Math.PI)\n        context.stroke()\n\n        for(var i = 0; i < this.points.length; i++) {\n            const point = this.points[i]\n            const random = this.randoms[i]\n\n            context.fillStyle =\n                \"hsl(0, 0%, \" + Math.round(random * 100) + \"%)\"\n            context.fillRect(\n                point.getX() * scale,\n                point.getY() * scale,\n                5 * scale,\n                5 * scale\n            )\n        }\n    }\n}\n\nfunction renderPlatforms(context, level, scale) {\n    context.fillStyle = \"#999999\"\n\n    for(const point of level) {\n        context.save()\n\n        context.rotate(point.angle)\n        context.fillRect((point.getRadius() - constants.PLATFORM_SIDE / 2) * scale,\n                         - constants.PLATFORM_SIDE / 2 * scale,\n                         constants.PLATFORM_SIDE * scale,\n                         constants.PLATFORM_SIDE * scale)\n        context.restore()\n    }\n}\n\nexport default Map\n","import { applyMiddleware, createStore } from 'redux'\nimport { createLogger } from 'redux-logger'\n\nimport './index.css'\nimport rootReducer from './reducers/index'\nimport { gameTick, keyDown, keyUp, touches, levelWin, resetLevel } from './actions/index'\nimport Player from './components/Player'\nimport Map from './components/Map'\n\nconst components = [Map, Player]\n\nconst init = () => {\n    var root = document.getElementById('root')\n    var canvas = document.createElement('canvas')\n    canvas.width = window.innerWidth\n    canvas.height = window.innerHeight\n    scale = Math.min(canvas.width / 1920, canvas.height / 1080)\n\n    window.onresize = (event) => {\n        canvas.width = window.innerWidth\n        canvas.height = window.innerHeight\n        scale = Math.min(canvas.width / 1920, canvas.height / 1080)\n    }\n\n    root.appendChild(canvas)\n    var context = canvas.getContext(\"2d\")\n    return context\n}\nvar scale = 1\n\nvar currentValue\nconst handleChange = (getState, context) => () => {\n    const previousValue = currentValue\n    currentValue = getState()\n\n    if(currentValue !== previousValue) {\n        const shouldUpdateCanvas = componentInstances.reduce(\n            (shouldUpdate, componentInstance) =>\n                (shouldUpdate || componentInstance.shouldComponentUpdate()),\n            false)\n        if(shouldUpdateCanvas) {\n            context.fillStyle = \"#000\"\n            context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n            context.save()\n            const canvas = context.canvas\n            context.translate(canvas.width / 2, canvas.height / 2)\n            context.scale(1, -1)\n            context.translate(0, -currentValue.player.cameraR * scale)\n            const rotation = -currentValue.player.cameraAngle + Math.PI / 2\n            context.rotate(rotation)\n\n            for(const componentInstance of componentInstances) {\n                componentInstance.renderToContext(context, currentValue, scale)\n            }\n\n            context.restore()\n        }\n    }\n}\n\nvar context = init()\n\nvar predicate = (getState, action) =>\n    (action.type !== \"RENDER_TICK\" && action.type !== \"GAME_TICK\")\n\nvar logger = createLogger({predicate: predicate})\nvar store\nif(process.env.NODE_ENV === \"development\") {\n    store = createStore(rootReducer, applyMiddleware(logger))\n} else {\n    store = createStore(rootReducer)\n}\n\nconst componentInstances = components.map(\n    (component) => new component(store.getState))\n\nconst render = handleChange(store.getState, context)\n\nconst animationTicker = (timestamp) => {\n    render()\n    window.requestAnimationFrame(animationTicker)\n}\nwindow.requestAnimationFrame(animationTicker)\n\nwindow.setInterval(() => {\n    const state = store.getState()\n    if(state.player.posR > state.level.goalRadius) {\n        store.dispatch(levelWin())\n    }\n    store.dispatch(gameTick())\n}, 10)\n\nwindow.onkeydown = (event) => {\n    if(event.key === \"r\") {\n        store.dispatch(resetLevel())\n    }\n    store.dispatch(keyDown(event.key))\n}\nwindow.onkeyup = (event) => store.dispatch(keyUp(event.key))\n\ndocument.body.addEventListener('touchstart', (event) => {\n    event.preventDefault()\n    store.dispatch(touches(event.touches, window.innerWidth, window.innerHeight))\n}, { passive: false })\n\ndocument.body.addEventListener('touchend', (event) => {\n    event.preventDefault()\n    store.dispatch(touches(event.touches, window.innerWidth, window.innerHeight))\n}, { passive: false })\n\ndocument.body.addEventListener('touchcancel', (event) => {\n    event.preventDefault()\n    store.dispatch(touches(event.touches, window.innerWidth, window.innerHeight))\n}, { passive: false })\n"],"sourceRoot":""}